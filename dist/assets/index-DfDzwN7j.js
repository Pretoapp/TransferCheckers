(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))r(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function c(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(e){if(e.ep)return;e.ep=!0;const s=c(e);fetch(e.href,s)}})();const O={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,VITE_BANK_PROVIDER:"mock",VITE_BLOCKCYPHER_KEY:"912f0ab54a4844888f3fcdb57dff935a",VITE_CACHE_TTL:"30000",VITE_ETHERSCAN_KEY:"X4UQY23YIIKIW8XE7CQDTZIW6XYKEBXDB5",VITE_LOG_LEVEL:"info",VITE_TRONSCAN_KEY:"8b40b753-99e1-4a51-b4d4-e86769b8a330"};var J={};const U=(n,o="")=>typeof import.meta<"u"&&(O==null?void 0:O[n])!==void 0?O[n]:(typeof process<"u"?J[n]:o)??o,C=U("VITE_ETHERSCAN_KEY"),P=U("VITE_BLOCKCYPHER_KEY"),$=U("VITE_TRONSCAN_KEY"),V="https://apilist.tronscanapi.com",X={TRN58392017365928:{status:"Completed",transactionID:"TX746290BD23",amount:"49,000,000.00",currency:"EUR",valueDate:"2025-05-05",remittanceInfo:"Invoice 2025-391",orderingCustomer:{name:"Ogden Pedro",bic:"HBUKGB4BXXX",bankName:"HSBC UK",account:"••••0275"},beneficiaryCustomer:{name:"Ms. Princess Am••••",bic:"KRTHHBK",bankName:"Krungthai Bank",account:"••••743-0"}},UETR7890XYZ:{status:"success",amount:"2,000,000.00",currency:"GBP",valueDate:"2025-05-05",transactionID:"TX198475BC00",orderingCustomer:{name:"Ogden Pedro (Savings ••••0275)",account:"••••0275",bic:"N/A",bankName:"N/A",bankAddress:"N/A"},beneficiaryCustomer:{name:"AL SHAWI C.",account:"N/A",bic:"N/A",bankName:"N/A",bankAddress:"N/A"}},TXID9876ABC:{status:"failed",reason:"Transaction reference not found or reversed."},PENDG000001:{status:"pending",amount:"150,000",currency:"JPY",valueDate:"2025-05-09",transactionID:"TXPEND5001A",remittanceInfo:"Payment for order P001",orderingCustomer:{name:"Eve Holdings Intl. (••••1122)",account:"••••1122",bic:"N/A",bankName:"N/A",bankAddress:"N/A"},beneficiaryCustomer:{name:"Future Systems Co. Ltd.",account:"N/A",bic:"N/A",bankName:"N/A",bankAddress:"N/A"},estimatedCompletion:"Within 2 business days."}};function q(n){const o=n.trim();return/^0x[a-fA-F0-9]{64}$/.test(o)?"ethereum":/^T[1-9A-HJ-NP-Za-km-z]{33}$/.test(o)?"tronAddr":/^[0-9a-fA-F]{64}$/.test(o)?"hex64":/^UETR[0-9A-Z-]{32,36}$/i.test(o)||/^TRN\d{12,20}$/i.test(o)?"bankMock":"unknown"}function G(n,o){if(n.status&&n.status.toLowerCase()==="failed")return{status:n.status,reason:n.reason??"Unknown error from mock bank.",transactionID:o};const c={status:n.status,transactionID:n.transactionID||o,amount:n.amount,currency:n.currency,valueDate:n.valueDate||n.date,remittanceInfo:n.remittanceInfo,rawValue:{status:n.status,transactionID:n.transactionID||o,valueDate:n.valueDate||n.date,amount:n.amount,currency:n.currency,remittanceInfo:n.remittanceInfo,orderingCustomer:n.orderingCustomer?{...n.orderingCustomer}:void 0,beneficiaryCustomer:n.beneficiaryCustomer?{...n.beneficiaryCustomer}:void 0}};return(n.status?n.status.toLowerCase():"")==="pending"&&(n.estimatedCompletion?c.reason=`Estimated completion: ${n.estimatedCompletion}`:n.remittanceInfo),c}async function z(n){var g,l;if(!C)return{status:"failed",reason:"Ethereum lookup unavailable (no API key)."};const o="https://api.etherscan.io/api",c=`${o}?module=transaction&action=gettxreceiptstatus&txhash=${n}&apikey=${C}`;let r;try{r=await fetch(c).then(h=>h.json())}catch(h){return console.error("[TransferService] Ethereum receipt check fetch error:",h),{status:"failed",reason:"Network error checking Ethereum transaction status."}}if(((g=r==null?void 0:r.result)==null?void 0:g.status)!=="1")return{status:"failed",reason:"Tx not confirmed successfully or not found on Ethereum."};const e=`${o}?module=proxy&action=eth_getTransactionByHash&txhash=${n}&apikey=${C}`;let s;try{s=await fetch(e).then(h=>h.json())}catch(h){return console.error("[TransferService] Ethereum transaction details fetch error:",h),{status:"failed",reason:"Network error fetching Ethereum transaction details."}}const i=s==null?void 0:s.result;if(!i)return{status:"failed",reason:"Could not retrieve Ethereum transaction details."};const d=BigInt(i.value||"0"),a=(Number(d)/1e18).toFixed(6);let m="—";if(i.blockNumber){const h=`${o}?module=proxy&action=eth_getBlockByNumber&tag=${i.blockNumber}&boolean=false&apikey=${C}`;try{const y=await fetch(h).then(A=>A.json());(l=y==null?void 0:y.result)!=null&&l.timestamp&&(m=new Date(parseInt(y.result.timestamp,16)*1e3).toLocaleString())}catch(y){console.error("[TransferService] Ethereum block timestamp fetch error:",y)}}return{status:"completed",amount:a,currency:"ETH",valueDate:m,from:i.from??"—",to:i.to??"—",transactionID:n,rawValue:{from:i.from,to:i.to,blockNumber:i.blockNumber,gasUsed:i.gasUsed?parseInt(i.gasUsed,16).toString():void 0}}}async function Z(n){if(!C)return{status:"failed",reason:"Ethereum wallet lookup unavailable (no API key)."};const o=`https://api.etherscan.io/api?module=account&action=balance&address=${n}&tag=latest&apikey=${C}`,c=`https://api.etherscan.io/api?module=account&action=txlist&address=${n}&page=1&offset=5&sort=desc&apikey=${C}`;try{const[r,e]=await Promise.all([fetch(o).then(d=>d.json()),fetch(c).then(d=>d.json())]),s=BigInt(r.result||"0");return{status:"info",amount:(Number(s)/1e18).toFixed(6),currency:"ETH",transactionID:n,valueDate:new Date().toLocaleString(),remittanceInfo:"Wallet balance (ETH)",rawValue:{balanceWei:s.toString(),last5Tx:e.result||[]}}}catch(r){return console.error("[fetchEthereumWallet] Error:",r),{status:"failed",reason:"Error fetching Ethereum wallet details."}}}async function Q(n){var c;const o=`https://api.blockcypher.com/v1/btc/main/addrs/${n}/full${P?`?token=${P}`:""}`;try{const r=await fetch(o).then(s=>s.json());return{status:"info",amount:((r.final_balance||0)/1e8).toFixed(8),currency:"BTC",transactionID:n,valueDate:new Date().toLocaleString(),remittanceInfo:"Wallet balance (BTC)",rawValue:{n_tx:r.n_tx,total_received:(r.total_received/1e8).toFixed(8),total_sent:(r.total_sent/1e8).toFixed(8),lastTxs:((c=r.txs)==null?void 0:c.slice(0,5))||[]}}}catch(r){return console.error("[fetchBitcoinWallet] Error:",r),{status:"failed",reason:"Error fetching Bitcoin wallet details."}}}async function ee(n){var r,e;const o=$?{"TRON-PRO-API-KEY":$}:{},c=`${V}/api/accountv2?address=${n}`;try{const s=await fetch(c,{headers:o}).then(m=>m.json()),i=((e=(r=s==null?void 0:s.data)==null?void 0:r[0])==null?void 0:e.balance)||0,d=(Number(i)/1e6).toFixed(6),a=await j(n);return{status:"info",amount:d,currency:"TRX",transactionID:n,valueDate:new Date().toLocaleString(),remittanceInfo:"Wallet balance (TRX)",rawValue:{balanceSun:i,latestTransfer:a.rawValue||a}}}catch(s){return console.error("[fetchTronWallet] Error:",s),{status:"failed",reason:"Error fetching Tron wallet details."}}}async function te(n){var d,a,m,g,l,h,y,A;const o=`https://api.blockcypher.com/v1/btc/main/txs/${n}`+(P?`?token=${P}`:"");let c;try{c=await fetch(o)}catch(E){return console.error("[TransferService] Bitcoin fetch error (network):",E),{status:"failed",reason:"Network error fetching Bitcoin transaction."}}if(!c.ok){let E="Bitcoin tx not found.";try{const v=await c.json();v&&v.error&&(E=`Bitcoin lookup failed: ${v.error}`)}catch{}return{status:"failed",reason:E}}const r=await c.json(),e=(r.total/1e8).toFixed(8),s=r.received?new Date(r.received).toLocaleString():"—",i={amount:e,currency:"BTC",valueDate:s,from:((m=(a=(d=r.inputs)==null?void 0:d[0])==null?void 0:a.addresses)==null?void 0:m[0])??"—",to:((h=(l=(g=r.outputs)==null?void 0:g[0])==null?void 0:l.addresses)==null?void 0:h[0])??"—",transactionID:n,rawValue:{confirmations:r.confirmations,fees:(r.fees/1e8).toFixed(8)+" BTC",inputs:(y=r.inputs)==null?void 0:y.map(E=>{var v;return((v=E.addresses)==null?void 0:v.join(", "))||"Unknown Input"}).join("; "),outputs:(A=r.outputs)==null?void 0:A.map(E=>{var v;return`${((v=E.addresses)==null?void 0:v.join(", "))||"Unknown Output"}: ${(E.value/1e8).toFixed(8)} BTC`}).join("; ")}};return r.confirmations>=6?{...i,status:"completed"}:{...i,status:"pending",reason:`Awaiting confirmations (${r.confirmations||0} so far)`}}async function j(n){var d,a;const o=`${V}/api/token_trc20/transfers?address=${n}&limit=1&sort=-timestamp`,c=$?{"TRON-PRO-API-KEY":$}:{};let r;try{r=await fetch(o,{headers:c})}catch(m){return console.error("[TransferService] Tron address fetch error (network):",m),{status:"failed",reason:"Network error fetching Tron address transactions."}}if(!r.ok){let m="Tron address lookup error.";try{const g=await r.json();g&&(g.message||g.error)&&(m=`Tron address error: ${g.message||g.error}`)}catch{}return{status:"failed",reason:m}}const e=await r.json(),s=(d=e.data)!=null&&d.length?e.data:(a=e.token_transfers)!=null&&a.length?e.token_transfers:[];if(!s.length)return console.warn(`[TransferService] No TRC20 transfers found for address ${n}. Other transaction types not yet fully supported for address lookup.`),{status:"failed",reason:"No TRC-20 transfers found for this address via this lookup."};const i=s[0].transaction_id;return i?H(i):{status:"failed",reason:"No transaction hash found in latest TRC-20 transfer data."}}async function H(n){var A,E,v,B,N,_,L,R,k,p;const o=$?{"TRON-PRO-API-KEY":$}:{},c=`${V}/api/transaction-info?hash=${n}`,r=await fetch(c,{headers:o}).catch(()=>null);if(!r||!r.ok){let b="TRON tx not found or API error.";if(r)try{const T=await r.json();b=T.message||T.error||`TRON API Error ${r.status}`}catch{}return{status:"failed",reason:b,transactionID:n}}const e=await r.json();if(!e||!e.hash)return{status:"failed",reason:"TRON tx empty or invalid response.",transactionID:n};let s="0",i="TRX",d=e.ownerAddress??((A=e.trigger_info)==null?void 0:A.owner_address)??"—",a=e.toAddress??((E=e.trigger_info)==null?void 0:E.to_address)??((v=e.trigger_info)==null?void 0:v.contract_address)??"—";const m=typeof TronWeb<"u"?TronWeb:null;if(e.trc20TransferInfo&&e.trc20TransferInfo.length>0){const b=e.trc20TransferInfo[0],T=b.amount_str||"0",S=Number(b.decimals||6),I=(b.symbol||"TOKEN").toUpperCase();s=(Number(BigInt(T))/10**S).toFixed(S),i=I,d=b.from_address||d,a=b.to_address||a}else if((B=e.trigger_info)!=null&&B.methodName&&((N=e.trigger_info)!=null&&N.parameter)&&e.tokenInfo){const b=e.trigger_info.methodName.toLowerCase();let T=null;if((b==="transfer"||b==="approve")&&typeof e.trigger_info.parameter._value<"u"?T=e.trigger_info.parameter._value:b==="transferfrom"&&typeof e.trigger_info.parameter._amount<"u"&&(T=e.trigger_info.parameter._amount),T!==null){const S=BigInt(String(T)),I=e.tokenInfo,x=Number((I==null?void 0:I.tokenDecimal)??(I==null?void 0:I.decimals)??6),M=((I==null?void 0:I.tokenAbbr)??(I==null?void 0:I.symbol)??"TOKEN").toUpperCase();if(s=(Number(S)/10**x).toFixed(x),i=M,b==="transfer"&&e.trigger_info.parameter._to){const t=e.trigger_info.parameter._to;if(m)try{a=m.address.fromHex(t)}catch{a=t}else a=t}}}else if((_=e.contractData)!=null&&_.amount||typeof e.amount<"u"){const b=BigInt(((L=e.contractData)==null?void 0:L.amount)??e.amount??"0");if(s=(Number(b)/1e6).toFixed(6),i="TRX",(R=e.contractData)!=null&&R.to_address&&m)try{a=m.address.fromHex(e.contractData.to_address)}catch{a=e.contractData.to_address}else(k=e.contractData)!=null&&k.to_address&&(a=e.contractData.to_address)}const g=e.timestamp?new Date(e.timestamp).toLocaleString():"—",l=e.contractRet==="REVERT",h=e.contractRet==="SUCCESS"||e.confirmed&&e.block>0&&!l,y={amount:s,currency:i,valueDate:g,from:d,to:a,transactionID:n,rawValue:{contractReturn:e.contractRet,confirmed:e.confirmed,block:e.block,ownerAddress:e.ownerAddress,toAddress:e.toAddress,contractData:e.contractData,methodName:(p=e.trigger_info)==null?void 0:p.methodName}};return l?{...y,status:"failed",reason:`Tron transaction reverted: ${e.resMessage||"Contract execution failed."}`.trim()}:h?{...y,status:"completed"}:{...y,status:"pending",reason:"Awaiting block confirmation or successful execution"}}async function K(n){var r;if(await new Promise(e=>setTimeout(e,150)),!n||typeof n!="string"||n.trim()==="")return{status:"failed",reason:"No reference provided."};const o=n.trim(),c=q(o);try{switch(c){case"ethWallet":return await Z(o);case"btcWallet":return await Q(o);case"tronWallet":return await ee(o);case"ethereum":return await z(o);case"tronAddr":return await j(o);case"hex64":{const e=await H(o);if(["completed","pending"].includes(e.status))return e;const s=((r=e.reason)==null?void 0:r.toLowerCase())||"";return s.includes("not found")||s.includes("invalid")||s.includes("api error")||s.includes("empty")?(console.warn(`[TransferService] Tron failed, trying BTC: ${e.reason}`),await te(o)):e}case"bankMock":{const e=X[o.toUpperCase()];return e?G(e,o):{status:"failed",reason:`Bank reference '${o}' not found in mock DB.`,transactionID:o}}default:return{status:"failed",reason:`Reference type for '${o}' is not recognized.`,transactionID:o}}}catch(e){return console.error("[TransferService] General error during fetchTransferData:",e),{status:"failed",reason:"Internal processing error. Please try again later.",transactionID:o}}}document.addEventListener("DOMContentLoaded",()=>{console.log("0. DOMContentLoaded event fired. Initializing main.js...");const n=document.getElementById("loadingOverlay"),o=document.getElementById("loaderText");let c=!1,r=0;const e=600;function s(t="SWIFT Connecting…"){console.log("DEBUG: showLoading() called."),!(!n||c)&&(c=!0,r=Date.now(),o&&(o.textContent=t),n.style.display="flex",n.removeAttribute("aria-hidden"),document.body.style.overflow="hidden",requestAnimationFrame(()=>{requestAnimationFrame(()=>{n.classList.add("is-active")})}),m&&(m.disabled=!0),a&&(a.disabled=!0))}function i(){if(console.log("DEBUG: hideLoading() called."),!n||!c)return;const t=Date.now()-r,u=Math.max(0,e-t);setTimeout(()=>{n.classList.remove("is-active"),n.setAttribute("aria-hidden","true"),document.body.style.overflow="",setTimeout(()=>{n.style.display="none"},400),c=!1,m&&(m.disabled=!1),a&&(a.disabled=!1)},u)}const d=document.getElementById("verifyForm"),a=document.getElementById("referenceInput"),m=d?d.querySelector('button[type="submit"]'):null,g=document.getElementById("errorMessageContainer"),l=document.getElementById("infoModal"),h=l?l.querySelector(".close-button"):null,y=document.getElementById("modalTitle"),A=document.getElementById("modalBody"),E=document.querySelector('a[href="#privacy"]'),v=document.querySelector('a[href="#terms"]'),B=document.querySelector('a[href="#contact"]');let N=!0;d||(console.error("MAIN.JS ERROR: verifyForm element not found!"),N=!1),a||(console.error("MAIN.JS ERROR: referenceInput element not found!"),N=!1),!m&&d&&(console.error("MAIN.JS ERROR: Submit button within verifyForm not found!"),N=!1),n||console.warn("MAIN.JS WARN: loadingOverlay element not found! Loading state will be less obvious."),g||console.warn("MAIN.JS WARN: errorMessageContainer element not found! Form validation errors might not display as intended."),(!l||!h||!y||!A)&&console.error("MAIN.JS ERROR: Essential modal elements (modal container, close button, title, or body) are missing.");const _=t=>{if(console.log("DEBUG: displayFormError() called with message:",t),!g||!a){console.warn("MAIN.JS WARN: Cannot display form error: errorMessageContainer or referenceInput missing."),alert(t);return}g.textContent=t,g.style.display="block",a.classList.add("input-error"),a.focus()},L=()=>{console.log("DEBUG: clearFormError() called."),!(!g||!a)&&(g.textContent="",g.style.display="none",a.classList.remove("input-error"))};a?a.addEventListener("input",()=>{a.classList.contains("input-error")&&L()}):N&&console.warn("MAIN.JS WARN: referenceInput not found for attaching 'input' event listener.");const R=(t,u)=>{if(console.log("DEBUG: openModal() called. Title:",t),!l||!y||!A){console.error("MAIN.JS ERROR: Cannot open modal: one or more modal elements are missing.");return}y.textContent=t,A.innerHTML=u,l.style.display="flex",l.style.opacity="0",requestAnimationFrame(()=>{requestAnimationFrame(()=>{l.style.opacity="1",l.classList.add("is-visible")})})},k=()=>{console.log("DEBUG: closeModal() called."),l&&(l.style.opacity="0",l.classList.remove("is-visible"),setTimeout(()=>{l.style.display="none",y.textContent="",A.innerHTML=""},400))};h?h.onclick=k:l&&console.warn("MAIN.JS WARN: Modal close button not found."),window.addEventListener("click",t=>{l&&t.target===l&&l.style.display==="flex"&&k()}),document.addEventListener("keydown",t=>{l&&t.key==="Escape"&&l.style.display==="flex"&&k()});const p=t=>t==null?"":String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),b=t=>{if(!t)return"status-info";const u=String(t).toLowerCase();return u.includes("success")||u.includes("completed")||u.includes("verified")||u.includes("paid")?"status-success":u.includes("pending")||u.includes("processing")||u.includes("in_progress")?"status-pending":u.includes("fail")||u.includes("error")||u.includes("rejected")||u.includes("cancelled")?"status-failed":"status-info"},T=t=>{if(console.log("DEBUG: displayApiResultInModal() called with data:",t),!t||!t.status){const f=t&&t.reason?p(t.reason):"Invalid or incomplete data received by display function.",F=t&&t.transactionID?`<dt>Reference:</dt><dd><span class="tx-id">${p(t.transactionID)}</span></dd>`:"",Y=t&&t.status?`Transfer Status: ${t.status.charAt(0).toUpperCase()+t.status.slice(1)}`:"Transfer Status Error";R(Y,`
        <div class="modal-text-content">
          <dl class="result-details">
            <dt>Status:</dt>
            <dd class="${t&&t.status?b(t.status):"status-failed"}"><strong>${t&&t.status?p(t.status.toUpperCase()):"ERROR"}</strong></dd>
            <dt>Details:</dt>
            <dd>${f}</dd>
            ${F}
          </dl>
        </div>`);return}const u=p(t.status),D=`Transfer Status: ${u.charAt(0).toUpperCase()+u.slice(1)}`,W=b(t.status);let w='<div class="modal-text-content">';if(w+='<dl class="result-details">',w+=`
      <dt>Status:</dt>
      <dd class="${W}"><strong>${u.toUpperCase()}</strong></dd>`,t.transactionID&&(w+=`
      <dt>Transaction ID:</dt>
      <dd><span class="tx-id">${p(t.transactionID)}</span></dd>`),t.valueDate&&(w+=`
      <dt>Date:</dt>
      <dd>${p(t.valueDate)}</dd>`),t.amount){const f=p(t.amount),F=t.currency?` ${p(t.currency)}`:"";w+=`
      <dt>Amount:</dt>
      <dd><span class="amount">${f}${F}</span></dd>`}if(t.remittanceInfo&&(w+=`
      <dt>Remittance Info:</dt>
      <dd>${p(t.remittanceInfo)}</dd>`),t.reason&&(W==="status-failed"||W==="status-info")&&(w+=`
      <dt>Details:</dt>
      <dd>${p(t.reason)}</dd>`),w+="</dl>",w+='<hr class="modal-section-separator">',t.rawValue&&t.rawValue.orderingCustomer){const f=t.rawValue.orderingCustomer;w+=`
        <h4 class="details-subtitle">Sender Details</h4>
        <div class="detail-group">
          ${f.name?`<p><strong>Name:</strong> ${p(f.name)}</p>`:""}
          ${f.account?`<p><strong>Account:</strong> <span class="account-id">${p(f.account)}</span></p>`:""}
          ${f.bic?`<p><strong>BIC/SWIFT:</strong> <span class="identifier-code">${p(f.bic)}</span></p>`:""}
          ${f.bankName?`<p><strong>Bank Name:</strong> ${p(f.bankName)}</p>`:""}
          ${f.bankAddress?`<p><strong>Bank Address:</strong> <span class="address">${p(f.bankAddress)}</span></p>`:""}
        </div>`}if(t.rawValue&&t.rawValue.beneficiaryCustomer){const f=t.rawValue.beneficiaryCustomer;w+=`
        <h4 class="details-subtitle">Recipient Details</h4>
        <div class="detail-group">
          ${f.name?`<p><strong>Name:</strong> ${p(f.name)}</p>`:""}
          ${f.account?`<p><strong>Account:</strong> <span class="account-id">${p(f.account)}</span></p>`:""}
          ${f.bic?`<p><strong>BIC/SWIFT:</strong> <span class="identifier-code">${p(f.bic)}</span></p>`:""}
          ${f.bankName?`<p><strong>Bank Name:</strong> ${p(f.bankName)}</p>`:""}
          ${f.bankAddress?`<p><strong>Bank Address:</strong> <span class="address">${p(f.bankAddress)}</span></p>`:""}
        </div>`}w+="</div>",R(D,w)};d&&N?d.addEventListener("submit",async t=>{console.log("1. Verify Now button clicked. Form elements present:",N),t.preventDefault(),L();const u=a.value.trim();if(console.log("2. Reference value entered:",u),!u){console.log("2a. Reference value is empty. Displaying form error."),_("Transfer Reference ID cannot be empty.");return}console.log("3. Calling showLoading()."),s();try{if(console.log("4. Attempting to call fetchTransferData with value:",u),typeof K!="function"){console.error("MAIN.JS CRITICAL ERROR: fetchTransferData is not a function! Check import from './api/index.js'."),T({status:"ERROR",reason:"Client-side setup error: Core API function not loaded.",transactionID:u});return}const D=await K(u);console.log("5. fetchTransferData API call returned:",D),T(D)}catch(D){console.error("6. ERROR occurred directly after calling fetchTransferData or in displayApiResultInModal:",D),T({status:"ERROR",reason:`Client-side error processing request: ${D.message||"Unknown error occurred."}`,transactionID:u})}finally{console.log("7. Calling hideLoading()."),i()}}):d?N||console.error("MAIN.JS ERROR: Critical form elements missing for verifyForm. Form submission handling not attached."):console.error("MAIN.JS ERROR: Verification form (verifyForm) not found. Form submission handling not attached.");const S=`
    <div class="modal-text-content">
      <h3>Privacy Policy</h3>
      <p>Your privacy is important to us. This policy explains how we collect, use, and protect your information.</p>
      <h4>Information Collection</h4>
      <p>We collect minimal data necessary for verification. This includes the reference ID you provide and aggregated, anonymized usage data.</p>
      <h4>Information Use</h4>
      <p>Data is used solely for processing your verification requests and improving our service.</p>
      <h4>Data Security</h4>
      <p>We employ industry-standard security measures to protect your data from unauthorized access, alteration, disclosure, or destruction.</p>
      <p class="last-updated">Last Updated: ${new Date().toLocaleDateString()}</p>
    </div>
  `,I=`
    <div class="modal-text-content">
      <h3>Terms of Service</h3>
      <p>Welcome to TransferCheckers. By using our service, you agree to these terms:</p>
      <h4>Acceptance of Terms</h4>
      <p>By accessing or using our service, you agree to be bound by these Terms. If you disagree with any part of the terms, then you may not access the service.</p>
      <h4>Service Description</h4>
      <p>TransferCheckers provides a platform for verifying the status of financial transfers. We do not facilitate transfers ourselves.</p>
      <h4>Limitation of Liability</h4>
      <p>TransferCheckers is not liable for any direct, indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your access to or use of or inability to access or use the Service; (ii) any conduct or content of any third party on the Service; (iii) any content obtained from the Service; and (iv) unauthorized access, use or alteration of your transmissions or content, whether based on warranty, contract, tort (including negligence) or any other legal theory, whether or not we have been informed of the possibility of such damage, and even if a remedy set forth herein is found to have failed of its essential purpose.</p>
      <p class="last-updated">Last Updated: ${new Date().toLocaleDateString()}</p>
    </div>
  `,x=`
    <div class="modal-text-content">
      <h3>Contact Us</h3>
      <div class="contact-details">
        <p>If you have any questions about this Privacy Policy, the practices of this site, or your dealings with this site, please contact us at:</p>
        <p><strong>Email:</strong> <a href="mailto:support@transfercheckers.com">support@transfercheckers.com</a></p>
        <p><strong>Support Hours:</strong> Monday - Friday, 9:00 AM - 5:00 PM (GMT+8)</p>
      </div>
      <p class="last-updated">Last Updated: ${new Date().toLocaleDateString()}</p>
    </div>
  `;E?E.addEventListener("click",t=>{t.preventDefault(),R("Privacy Policy",S)}):console.warn("MAIN.JS WARN: Privacy policy link not found."),v?v.addEventListener("click",t=>{t.preventDefault(),R("Terms of Service",I)}):console.warn("MAIN.JS WARN: Terms link not found."),B?B.addEventListener("click",t=>{t.preventDefault(),R("Contact Us",x)}):console.warn("MAIN.JS WARN: Contact link not found."),"serviceWorker"in navigator?window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js").then(t=>{console.log("Service Worker registered with scope:",t.scope)}).catch(t=>{console.error("Service Worker registration failed:",t)})}):console.warn("MAIN.JS WARN: Service workers are not supported.");const M=document.getElementById("currentYear");M?M.textContent=new Date().getFullYear():console.warn("MAIN.JS WARN: currentYear span in footer not found."),console.log("Finished initializing main.js event listeners.")});
